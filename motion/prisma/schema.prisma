// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String   @unique

  // referral settings
  referralKey String @unique // for the user to share https://motion.zip?ref={referralKey}
  referralFee Int    @default(25) // 25 percent by default

  // referral open graph settings
  referralTitle String?
  referralImage String?

  // wallet that referred this wallet (if any)
  referredBy String?

  // relations
  transactions Tx[]
  tokens       Token[]
}

model Tx {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // wallet that initiated the transaction
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  // transaction details
  amountInDrops                  String // amount of xrp in the transaction in drops
  amountInUsd                    Float // usd value of the transaction
  totalFeeInDrops                String // total fee of the transaction in drops
  totalFeeInUsd                  Float // usd value of the fee
  feesCollectedByPlatformInDrops String // fees collected by motion.zip in drops
  feesCollectedByPlatformInUsd   Float // fees collected by motion.zip in usd
  feesCollectedByReferralInDrops String? // fees collected by referral wallet (if any) in drops
  feesCollectedByReferralInUsd   Float? // fees collected by referral wallet (if any) in usd

  // wallet that received the referral fee (if any)
  feesCollectedBy String? // address of the wallet that received the referral fee (if any)
}

model Token {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdOnPlatform Boolean  @default(true)

  // token details
  name        String
  currency    String
  currencyHex String
  issuer      String
  description String  @db.Text
  icon        String
  banner      String
  website     String?
  telegram    String?
  x           String?
  domain      String? @unique // this will be the token's unique subdomain for hosting the /.well-known/xrp-ledger.toml file

  // wallet that created the token
  createdBy   Wallet? @relation(fields: [createdById], references: [id])
  createdById String?
}

enum TradeType {
  Payment
  OfferCreate
}

model Trade {
  id        String    @id @default(cuid())
  timestamp DateTime
  type      TradeType
  account   String
  hash      String    @unique
  ledger    Int

  // easy access field for querying
  currency String
  issuer   String

  // for volume calculations
  tokenAmount String
  xrpAmount   String
  price       String

  // affected nodes
  affectedNodes Json[]
}

model SyncStatus {
  id                        String   @id @default("main")
  lastSyncedAt              DateTime @updatedAt
  epochLedgerIndex          Int
  lastLedgerIndex           Int
  isInitialBackfillComplete Boolean  @default(false)
  isSyncing                 Boolean  @default(false)
}
